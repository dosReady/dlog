{"version":3,"sources":["resources/img/do.svg","resources/img/bg_login.png","lib/Utlz.tsx","components/Editor.tsx","components/CommonContainer.tsx","components/EditorContainer.tsx","pages/admin/PostWritePage.tsx","api/service/PostService.ts","api/service/UserService.ts","api/Core.ts","components/LoginForm.tsx","pages/public/DlogLoginPage.tsx","components/Category.tsx","components/PostList.tsx","components/PostMngList.tsx","pages/public/PostListPage.tsx","components/PostView.tsx","pages/public/PostViewPage.tsx","components/LoadPage.tsx","components/CommonContainerTypeA.tsx","pages/public/TagPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StringUtlz","value","undefined","Object","keys","length","EditorBtnWrap","styled","div","EditorDiv","EditorTitleDiv","EditorMiddleDiv","ViewerDiv","Editor","inject","observer","editorEl","React","createRef","viewerEl","editorComp","viewerComp","state","post","title","editType","this","isMobile","current","toastui","el","previewStyle","initialEditType","height","hideModeSwitch","events","onContentsChange","toolbarItems","Viewer","postservice","props","postkey","isEmpty","getPost","data","setState","setMarkdown","PostContent","window","navigator","userAgent","indexOf","PostTitle","toast","error","category","PostCategory","inputPost","history","replace","isCheck","procSave","sContents","getMarkdown","event","sTitle","currentTarget","style","display","borderLeft","initialize","loadData","type","placeholder","onChange","onChangeMainTitle","ref","onClick","onClickSaveBtn","onClickBackBtn","onClickPrvBtn","Component","autobind","withRouter","HeaderComp","header","HeaderContainer","LinkWrap","MenuDiv","SideMenu","MenuItem","MainConatiner","main","PageConatiner","PageHeader","CommonConatiner","sideMenuEl","target","sClass","classList","contains","className","userservice","reqLogout","setPostkey","isLogin","href","src","Logo","onClickBars","onClickPosting","onClickLogout","subTitle","children","EditorTitle","span","EditorConatiner","toUpperCase","PostWritePage","PostService","KEY","postdata","localStorage","setItem","JSON","stringify","_postkey","_category","postList","api","res","list","console","log","param","getItem","parse","e","observable","action","computed","UserService","defaults","headers","Authorization","_userdata","_setHeader","AccessToken","removeItem","setUserdata","loginInfo","user","location","removeUserdata","userdata","axios","create","baseURL","responseType","store","LoginFormDivWrap","LoginFormDiv","LoginButton","button","InputDivWrap","InputDiv1","InputDiv2","LoginForm","procLogin","LoginID","Password","onChangeId","onChangePwd","onClickLogin","GlobalStyle","createGlobalStyle","Wrap","bgimg","HeadLine","DlogLoginPage","reqLogin","PostCategoryWrap","Category","nodes","parentElement","i","remove","add","textContent","toLocaleLowerCase","setCategory","loadFunc","onClickCategory","PostUL","ul","PostTop","PostContents","PostList","datas","renderComp","map","key","to","PostKey","CreatedAt","PostSubTitle","PostLeftPanel","PostRightPanel","PostMngList","removePost","push","procDelete","onUpdateClick","onDeleteClick","PostContainer","PostWrap","PostListPage","getPostList","posts","ViewerWrap","PostLeftWrap","FooterWrap","CopyrightWrap","CopyrightDomain","PostView","info","initialValue","PostViewPage","match","params","PostViewJSX","LoadPage","_map","Map","set","component","isPublic","pages","pageInfo","get","path","CommonContainerTypeA","AllWeb","TagLine","TagList","TagTitle01","a","TagTitle02","TagBottomLine","TagBox","section","TagBundle","TagName","TagContents","p","TagCount","TagPage","App","basename","exact","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Boolean","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0d01390.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/do.d412a098.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg_login.c465d8d4.png\";","export class StringUtlz  {\n\n    public static isEmpty(value:any): boolean {\n        \n        if( value === \"\" \n        ||  value === null \n        ||  value === undefined \n        || ( value !== null && typeof value === \"object\" && Object.keys(value).length > 0 ) ){\n            return true ;\n        }\n\n        return false;\n    }\n\n}","import toastui from '@toast-ui/editor';\nimport Viewer from '@toast-ui/editor/dist/toastui-editor-viewer';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport { PostModel } from 'api/model/PostModels';\nimport PostService from 'api/service/PostService';\nimport autobind from 'autobind-decorator';\nimport 'codemirror/lib/codemirror.css';\nimport { StringUtlz } from 'lib/Utlz';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport styled from 'styled-components';\n\nconst EditorBtnWrap = styled.div`\n    margin-top:1rem;\n    padding-bottom: 1rem;\n    button {\n        border: 1px solid #F3F3F3;\n        margin-right:1rem;\n        :hover {\n            background-color: #456582;\n        }\n    }\n`\n\nconst EditorDiv = styled.div`\n    flex:1;\n    .tui-scrollsync , .tui-toolbar-divider{\n        display:none!important;\n    }\n    .te-editor-section {\n        background-color:#fff;\n        .tui-editor {\n            padding-left: 10px;\n        }\n        .te-ww-container {\n            pre {\n                color:#fff;\n                background-color:#294854;\n            }\n            blockquote {\n                background-color: transparent;\n                border-left: 4px solid #f1d02e;\n            }\n        }\n    }\n    .tui-popup-body {\n        color:#3a3649;\n    }\n\n    .te-markdown-tab-section { display:none!important; }\n`\n\nconst EditorTitleDiv = styled.div`\n    padding: 18px 25px;\n    background-color: #fff;\n    input {\n        font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif!important;\n        color: #181818!important;\n        width: 100%;\n    }\n`\n\nconst EditorMiddleDiv = styled.div`\n    flex: 1;\n    display:flex;\n    flex-direction:row;\n    overflow: hidden;\n`\n\n\nconst ViewerDiv = styled.div`\n    flex:1;\n    border-right: 1px solid #e5e5e5;\n    border-bottom: 1px solid #e5e5e5;\n    border-top: 2px solid #e5e5e5e5;\n    padding: 10px 25px;\n    overflow: auto;\n    .tui-scrollsync , .tui-toolbar-divider{\n        display:none!important;\n    }\n    .tui-editor-contents * {\n        color: #F3F3F3;\n    }\n\n    .tui-editor-contents {\n        blockquote {\n            background-color: transparent;\n            border-left: 4px solid #f1d02e;\n        }\n\n        h1,h2,h3{\n            border:none;\n        }\n\n        pre {\n            overflow-y:scroll;\n            background-color:#294854;\n        }\n    }\n\n    @media screen and (max-width: 900px) { \n        display:none;\n    }\n`\n@inject('postservice')\n@observer\nclass Editor extends React.Component<\n    RouteComponentProps & {\n        postservice?:PostService\n    }, \n    {post: PostModel, title:string}\n> {\n    private editorEl = React.createRef<HTMLDivElement>();\n    private viewerEl = React.createRef<HTMLDivElement>();\n    private editorComp: toastui | null = null;\n    private viewerComp: Viewer | null = null;\n\n    readonly state = {\n        post: {} as PostModel,\n        title: \"\"\n    }\n\n    initialize(): void {\n        let editType = \"markdown\";\n        if(this.isMobile()) {\n            editType =  \"wysiwyg\";\n        }\n\n\n        const editorEl = this.editorEl.current!;\n        this.editorComp = new toastui({\n            el: editorEl,\n            previewStyle: \"tab\",\n            initialEditType: editType, // wysiwyg\n            height: '100%',\n            hideModeSwitch: true,\n            events: {\n                \"change\": this.onContentsChange,\n                //\"command\": (arg:string) => {console.log(arg)}\n            },\n            toolbarItems: [\"heading\", \"bold\", \"quote\", \"codeblock\", \"ul\", \"ol\"]\n            // toolbarItems: [{\n            //     type: \"button\",\n            //     options: {\n            //         className: \"fas fa-search\",\n            //         text: \"TEST\",\n            //         command: \"test1\",\n            //     }\n            // }]\n            // // events: {\n            //     \"changeMode\": () => { console.log(\"!!!!\")}\n            // }\n        });\n\n        const viewerEl = this.viewerEl.current!;\n        this.viewerComp = new Viewer({\n            el: viewerEl\n        });\n    }\n\n    async loadData(): Promise<void> {\n        const {postservice} = this.props;\n        const postkey = postservice?.postkey;\n        if(!StringUtlz.isEmpty(postkey)) {\n            const data = await postservice!.getPost(postkey || '');\n            this.setState({\n                post: data\n            })\n\n            this.editorComp!.setMarkdown(data.PostContent);\n            this.viewerComp!.setMarkdown(data.PostContent);\n        }\n    }\n\n    isMobile(): boolean {\n        const userAgent = window.navigator.userAgent;\n        if(userAgent.indexOf(\"iPhone\") > -1)  return true;\n        return false;\n    }\n\n    isCheck(): boolean {\n        if(StringUtlz.isEmpty(this.state.post.PostTitle)) {\n            toast.error(\"제목을 입력해주세요.\");\n            return false;\n        }\n\n        if(StringUtlz.isEmpty(this.state.post.PostContent)) {\n            toast.error(\"내용을 입력해주세요.\");\n            return false;\n        }\n\n        return true;\n    }\n\n    async procSave():Promise<void> {\n        const category = this.props.postservice?.category;\n        if(StringUtlz.isEmpty(category)) {\n            toast.error(\"카테고리 정보가 없습니다.\");\n            return;\n        }\n\n        await this.setState({\n            post: {\n                ...this.state.post,\n                PostCategory: category || ''\n            }\n        });\n        await this.props.postservice?.inputPost(this.state.post);\n        this.props.history.replace('/');\n    }\n\n    @autobind\n    onClickSaveBtn():void {\n        if(!this.isCheck()) return;\n        this.procSave();\n    }\n\n    @autobind\n    onClickBackBtn(): void {\n        this.props.history.replace(\"/\");\n    }\n\n    @autobind\n    onContentsChange(): void {\n        const sContents:string = this.editorComp!.getMarkdown();\n        this.viewerComp!.setMarkdown(sContents);\n        this.setState({\n            post: {\n                ...this.state.post,\n                PostContent: sContents   \n            }\n        });\n    }\n\n    @autobind\n    onChangeMainTitle(event: React.ChangeEvent<HTMLInputElement>): void {\n        const sTitle = event.currentTarget.value;\n        this.setState({\n            post: {\n                ...this.state.post,\n                PostTitle: sTitle\n            }\n        });\n    }\n\n    @autobind\n    onClickPrvBtn():void {\n        const sDispaly = this.editorEl.current!.style.display;\n        \n        if(sDispaly !==  \"none\") {\n            this.editorEl.current!.style.display = \"none\";\n            this.viewerEl.current!.style.display = \"block\";\n            this.viewerEl.current!.style.borderLeft = \"1px solid #e5e5e5\";\n        } else {\n            this.editorEl.current!.style.display = \"\";\n            this.viewerEl.current!.style.display = \"\";\n            this.viewerEl.current!.style.borderLeft = \"\";\n        }\n       \n    }\n\n    componentDidMount(): void {\n        this.initialize();\n        this.loadData();\n    }\n\n    render():JSX.Element {\n        return (\n            <>\n            <EditorTitleDiv>\n                <input type=\"text\" placeholder=\"제목을 입력하세요\" \n                    value={this.state.post.PostTitle || \"\"} \n                    onChange={this.onChangeMainTitle}\n                />\n            </EditorTitleDiv>\n            <EditorMiddleDiv>\n                <EditorDiv ref={this.editorEl}/>\n                <ViewerDiv ref={this.viewerEl}/>\n            </EditorMiddleDiv>\n            <EditorBtnWrap>\n                <button onClick={this.onClickSaveBtn}>작성하기</button>\n                <button onClick={this.onClickBackBtn}>뒤로가기</button>\n                <button onClick={this.onClickPrvBtn}>미리보기</button>\n            </EditorBtnWrap>\n            </>\n        )\n    }\n}\n\nexport default withRouter(Editor);","import UserService from 'api/service/UserService';\nimport autobind from 'autobind-decorator';\nimport { StringUtlz } from 'lib/Utlz';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport { ReactSVG } from 'react-svg';\nimport Logo from 'resources/img/do.svg';\nimport styled from 'styled-components';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport PostService from 'api/service/PostService';\n\nexport const HeaderComp = styled.header`\n    position: fixed;\n    z-index: 99;\n    top: 0;\n    left: 0;\n    right: 0;\n    padding: 10px;\n    border-bottom: 1px solid #3a3649;\n    backdrop-filter: blur(16px);\n`;\n\nexport const HeaderContainer = styled.div`\n    display:flex;\n    justify-content: space-between;\n    align-items: center;\n    max-width: 1024px;\n    margin: 0 auto;\n`;\n\nexport const LinkWrap = styled.div`\n    display: flex;\n    align-items: center;   \n    a {\n        font-size: 13.5px;\n        margin-right: 20px;\n        div {\n            svg {\n                width:30px;\n                background-color: #282d35   ;\n                border-radius: 5px;\n                path {\n                    fill: white;\n                }    \n            }\n        }\n        :hover {\n            text-decoration: underline;\n        }\n    }\n    span {\n        font-size:13.5px;\n        :hover {\n            text-decoration: underline;\n        }\n    }\n    \n`\nexport const MenuDiv = styled.div`\n    position:relative;\n    i.fas {\n        user-select: none;\n        &.fa-times {\n            width 32px;\n            font-size:23px;\n        }\n        &.fa-bars {\n            width 32px;\n        }\n        font-size: 1.35rem;\n        cursor:pointer;\n    }\n`\n\nexport const SideMenu = styled.div`\n    user-select: none;\n    position: absolute;\n    z-index: 10;\n    top: 39px;\n    right: 0;\n    width: 180px;\n    background-color: #282d35;\n    box-shadow: 3px 7px 10px 0px #1a1e23;\n`\nexport const MenuItem = styled.div`\n    padding: 1rem 1.5rem;  \n    border-bottom: 1px solid #3a3649;\n    cursor:pointer;\n    :hover {\n        background-color: #363d48;\n    }\n`\n\nexport const MainConatiner = styled.main`\n    position:relative;\n    flex:1;\n`\n\nexport const PageConatiner = styled.div`\n    margin-top:8rem;\n    max-width:1024px;\n    margin-left: auto;\n    margin-right: auto;\n`\n\nexport const  PageHeader = styled.header`\n    padding: 0 1rem;\n    p {\n        margin-top: 1rem;\n        border-left: 4px solid #dddddd;\n        padding: 0 15px;\n    }\n`\n\n@inject('postservice', 'userservice')\n@observer\nclass CommonConatiner extends React.Component<RouteComponentProps & {\n    title?:string\n    subTitle?:string\n    postservice?:PostService\n    userservice?:UserService\n}, {}> {\n    private sideMenuEl = React.createRef<HTMLDivElement>();\n\n    @autobind\n    onClickBars(event: React.MouseEvent<HTMLElement, MouseEvent>): void {\n        const target = event.currentTarget;\n        const sClass = target.classList;\n        const sideMenuEl = this.sideMenuEl.current!;\n        if(sClass.contains(\"fa-bars\")) {\n            target.className = \"fas fa-times\";\n            sideMenuEl.style.display = \"block\";\n        } else {\n            target.className = \"fas fa-bars\";\n            sideMenuEl.style.display = \"none\";\n        }\n    }\n\n    @autobind\n    onClickLogout(event: React.MouseEvent<HTMLElement, MouseEvent>): void {\n        this.props.userservice?.reqLogout();\n    }\n\n    @autobind\n    onClickPosting():void{\n        this.props.postservice?.setPostkey(\"\");\n    }\n\n    render():JSX.Element {\n        const isLogin = this.props.userservice?.isLogin;\n        return (\n            <>\n                <HeaderComp>\n                    <HeaderContainer>\n                        <LinkWrap>\n                            <a href=\"/dlog\"><ReactSVG src={Logo}/></a>\n                            <a href=\"/dlog\">오늘도.log</a>\n                        </LinkWrap>\n                        <LinkWrap>\n                            <MenuDiv>\n                                <i className=\"fas fa-bars\" onClick={this.onClickBars}/>\n                                <SideMenu style={{display:\"none\"}} ref={this.sideMenuEl} >\n                                    {isLogin && <MenuItem><a href=\"/dlog/post/write\" onClick={this.onClickPosting}>Posting</a></MenuItem>}\n                                    {isLogin && <MenuItem><span onClick={this.onClickLogout}>Logout</span></MenuItem>}\n                                    {!isLogin && <MenuItem><a href=\"/dlog/common/login\">Login</a></MenuItem>}\n                                </SideMenu>\n                            </MenuDiv>\n                        </LinkWrap>\n                    </HeaderContainer>\n                </HeaderComp>\n                <MainConatiner>\n                    <PageConatiner>\n                        <PageHeader>\n                            <h1>{this.props.title}</h1>\n                            {!StringUtlz.isEmpty(this.props.subTitle) ? (<p>{this.props.subTitle}</p>) : \"\"}\n                        </PageHeader>\n                        {this.props.children}\n                    </PageConatiner>\n                </MainConatiner>\n            </>\n        )\n    }\n}\n\nexport default withRouter(CommonConatiner);","import { HeaderComp, MainConatiner } from 'components/CommonContainer';\nimport React from 'react';\nimport { ReactSVG } from 'react-svg';\nimport Logo from 'resources/img/do.svg';\nimport styled from 'styled-components';\nimport { inject, observer } from 'mobx-react';\nimport { StringUtlz } from 'lib/Utlz';\nimport PostService from 'api/service/PostService';\n\n\nconst HeaderContainer = styled.div`\n    display:flex;\n    justify-content: flex-start;\n    align-items: center;\n    max-width: 1024px;\n    margin: 0 auto;\n`;\n\nconst LinkWrap = styled.div`\n    display: flex;\n    align-items: center;   \n    flex: 1;\n    a {\n        font-size: 13.5px;\n        margin-right: 20px;\n        div {\n            svg {\n                width:30px;\n                background-color: #282d35   ;\n                border-radius: 5px;\n                path {\n                    fill: white;\n                }    \n            }\n        }\n        :hover {\n            text-decoration: underline;\n        }\n    }\n`\n\nconst EditorTitle = styled.span`\n    flex:1;\n    font-weight:bold;\n`\n\n\nconst PageConatiner = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-top:5rem;\n    max-width:1024px;\n    margin-left: auto;\n    margin-right: auto;\n    height: calc( 100vh - 5rem );\n`\n@inject('postservice')\n@observer\nclass EditorConatiner extends React.Component<{\n    postservice?:PostService\n}, {}> {\n    render():JSX.Element {\n        let title = this.props.postservice?.category;\n        if(!StringUtlz.isEmpty(title)) {\n            title = title?.toUpperCase();\n        }\n        return (\n            <>\n                <HeaderComp>\n                    <HeaderContainer>\n                        <LinkWrap>\n                            <a href=\"/dlog\"><ReactSVG src={Logo}/></a>\n                            <a href=\"/dlog\">오늘도.log</a>\n                        </LinkWrap>\n                        <EditorTitle>{title}</EditorTitle>\n                    </HeaderContainer>\n                </HeaderComp>\n                <MainConatiner>\n                    <PageConatiner>\n                        {this.props.children}\n                    </PageConatiner>\n                </MainConatiner>\n            </>\n        )\n    }\n}\n\nexport default EditorConatiner;","import React from 'react';\nimport Editor from 'components/Editor';\nimport EditorConatiner from 'components/EditorContainer';\n\nclass PostWritePage extends React.Component<{},{}> {\n\n\n    render():JSX.Element {\n        return (\n            <EditorConatiner>\n                <Editor/>\n            </EditorConatiner>\n        )\n    }\n}\n\nexport default PostWritePage;","import { api } from 'api/Core';\nimport { PostModel, IPostStore } from 'api/model/PostModels';\nimport { StringUtlz } from 'lib/Utlz';\nimport { observable, action, computed } from 'mobx';\nclass PostService {\n    /*\n    ====== MOBX =======\n    */\n    private KEY:string = \"POST_STORE\";\n\n    @observable private _postkey: string = \"\";\n    @observable private _category: string = \"\";\n\n    @action \n    public setPostkey(value:string):void {\n      const data:IPostStore = {\n        ...this.postdata,\n        postkey: value\n      }\n\n      window.localStorage.setItem(this.KEY, JSON.stringify(data));\n      this._postkey = value;\n    }\n\n    @computed \n    public get postkey():string {\n      const data: IPostStore = this.postdata;\n      if(data.postkey !== undefined) {\n        this._postkey = data.postkey;\n      }\n\n      return this._postkey;\n    }\n\n    @action \n    public setCategory(value:string):void {\n      const data:IPostStore = {\n        ...this.postdata,\n        category: value\n      }\n      window.localStorage.setItem(this.KEY, JSON.stringify(data));\n      this._category = value;\n    }\n\n    @computed \n    public get category():string {\n      const data: IPostStore = this.postdata;\n      if(data.category !== undefined) {\n        this._category = data.category;\n      }\n\n      return this._category;\n    }\n\n    private get postdata(): IPostStore {\n      let data = {} as IPostStore;\n      try {\n        const value = window.localStorage.getItem(this.KEY);\n        if(!StringUtlz.isEmpty(value)) {\n          const storedata = JSON.parse(value || '');\n          data = storedata;\n        }\n      } catch (e) {}\n    \n      return data;\n    }\n    /*\n    ====== API =======\n    */\n    public async getPostList(category: string): Promise<PostModel[] | null> {\n        let postList: PostModel[] | null = null;\n        try {\n            if(StringUtlz.isEmpty(category)) category = \"post\";\n            const res = await api.post(\"/get/postlist\", {\"PostCategory\": category});\n            postList = res.data.list;\n        } catch (error) {\n            console.log(error);\n        }\n        return postList;\n    }\n\n    public async inputPost(param:PostModel): Promise<void> {\n        await api.post(\"/input/post\", {...param});\n    }\n\n\n    public async addPost(param:PostModel): Promise<void> {\n        await api.post(\"/add/post\", {...param});\n    }\n\n    public async removePost(postkey: string): Promise<void> {\n        await api.post(\"/remove/post\", {\"PostKey\": postkey});\n    }\n\n    public async getPost(postkey:string):Promise<PostModel> {\n        let post: PostModel = {} as PostModel;\n        try {\n            const {data} = await api.post(\"get/post\", {\"postkey\": postkey});\n            post = data.post;\n        } catch (error) {}\n        return post;\n    }\n\n\n}\n\nexport default PostService;","import { api } from 'api/Core';\nimport { ILoginInfo, ILoginStore } from 'api/model/UserModels';\nimport { StringUtlz } from 'lib/Utlz';\nimport { action, computed, observable } from 'mobx';\nimport { RouteComponentProps } from 'react-router-dom';\n\nclass UserService {\n    /*\n    ====== MOBX =======\n    */\n\n    private KEY: string = \"USER_STORE\";\n    \n    @observable\n    private _userdata:ILoginStore = {} as ILoginStore;\n\n    private _setHeader(value:string):void {\n        if(!StringUtlz.isEmpty(value)) {\n          api.defaults.headers.Authorization = `Bearer ${value}`;\n        } else {\n          api.defaults.headers.Authorization = \"\";\n        }\n    } \n\n    @action\n    public setUserdata(value:ILoginStore): void {\n        this._userdata = value;\n        this._setHeader(value.AccessToken || '');\n        window.localStorage.setItem(this.KEY, JSON.stringify(value));\n    }\n\n    @computed\n    public get userdata():ILoginStore {\n        let data = this._userdata;\n        try {\n          const value = window.localStorage.getItem(this.KEY);\n          if(StringUtlz.isEmpty(data.AccessToken) && !StringUtlz.isEmpty(value)) {\n            const storedata = JSON.parse(value || '');\n            data = storedata;\n            this._setHeader(data.AccessToken || '');\n          }\n        } catch (e) {}\n      \n        return data;\n    }\n\n    @action\n    public removeUserdata():void {\n        window.localStorage.removeItem(this.KEY);\n        this.setUserdata({} as ILoginStore);\n    }\n\n    @computed\n    public get isLogin():boolean {\n      if(StringUtlz.isEmpty(this.userdata.AccessToken)) return false;\n      return true;\n    }\n    /*\n    ====== API =======\n    */\n    public async reqLogin(loginInfo:ILoginInfo, props:RouteComponentProps): Promise<void> {\n        const {data} = await api.post(\"/user/login\", {\"user\": loginInfo});\n        this.setUserdata(data.user);\n        props.history.replace(\"/\");\n    }\n\n    public async reqLogout(): Promise<void> {\n        try {\n            const data = this._userdata;\n            await api.post(\"/user/logout\", {\"user\": data});\n            // 로그아웃처리후 웹앱이 재 렌더링처리를 위해 window location을 사용\n            await window.location.replace(\"/dlog\");\n            await this.removeUserdata();\n        } catch(error) {}\n    }\n}\n\nexport default UserService;","import axios from 'axios';\nimport PostService from 'api/service/PostService';\nimport UserService from 'api/service/UserService';\n\nexport const api =  axios.create(\n    {\n        //baseURL: \"http://127.0.0.1:8080\",\n        baseURL: \"https://api.dveloper.me/\",\n        headers: {\n            \"content-type\": \"application/json\"\n        },\n        responseType: \"json\"\n    }\n)\n\nclass RootStore {\n    postservice:PostService;\n    userservice:UserService;\n    constructor() {\n      this.postservice = new PostService();\n      this.userservice = new UserService();\n    }\n}\n  \nexport const store =  new RootStore();","import { ILoginInfo } from 'api/model/UserModels';\nimport autobind from 'autobind-decorator';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { api } from 'api/Core';\n\nconst LoginFormDivWrap = styled.div`\n    margin-top:10vh;\n`\n\nconst LoginFormDiv = styled.div`\n    max-width: 350px;\n    margin: 0 auto;\n    strong {\n        color: #000;\n        display: block;\n        font-weight: normal;\n        font-size: 24px;\n        line-height: 34px;\n        letter-spacing: -0.6px;\n        text-align: center;\n    }\n`\nconst LoginButton = styled.button`\n    margin: 20px 0 0;\n    width: 100%;\n    height: 48px;\n    border-radius: 3px;\n    font-size: 16px;\n    color: #000;\n    background-color: #fff;\n    border: 1px solid #23282e;\n`\nconst InputDivWrap = styled.div`\n    margin: 35px 0 0;\n    border: 1px solid #23282e;\n    border-radius: 3px;\n    background-color: #fff;\n`\n\nconst InputDiv1 = styled.div`\n    padding: 18px 19px 19px;\n    color: #000;\n    font-size: 13px;\n`\n\nconst InputDiv2 = styled.div`\n    padding: 18px 19px 19px;\n    color: #000;\n    font-size: 13px;\n    border-top: 1px solid #23282e;\n`\n\n\nclass LoginForm extends React.Component<{\n    procLogin: (loginInfo:ILoginInfo) => Promise<void>\n}, {\n    loginInfo: ILoginInfo\n}> {\n\n    readonly state = {\n        loginInfo: {} as ILoginInfo\n    }\n\n    @autobind\n    onClickLogin():void {\n        this.props.procLogin(this.state.loginInfo);\n    }\n    @autobind\n    onClickTest():void {\n        api.post(\"/echo\")\n    }\n\n    @autobind\n    onChangeId(event: React.ChangeEvent<HTMLInputElement>):void {\n        const value = event.currentTarget.value;\n\n        this.setState({\n            loginInfo: {\n                ...this.state.loginInfo,\n                LoginID:value\n            }\n        });\n    }\n\n    @autobind\n    onChangePwd(event: React.ChangeEvent<HTMLInputElement>): void {\n        const value = event.currentTarget.value;\n        this.setState({\n            loginInfo: {\n                ...this.state.loginInfo,\n                Password:value\n            }\n        });\n    }\n\n    render():JSX.Element {\n        return  (\n            <LoginFormDivWrap>\n                <LoginFormDiv>\n                    <strong>로그인하세요</strong>\n                    <form>\n                    <InputDivWrap>\n                        <InputDiv1>\n                            <input type=\"text\" placeholder=\"ID\" onChange={this.onChangeId} value={this.state.loginInfo.LoginID || ''}/>\n                        </InputDiv1>\n                        <InputDiv2>\n                            <input type=\"Password\" placeholder=\"Password\" onChange={this.onChangePwd} value={this.state.loginInfo.Password || ''}/>\n                        </InputDiv2>\n                    </InputDivWrap>\n                    </form>\n                    <LoginButton onClick={this.onClickLogin}>로그인</LoginButton>\n                </LoginFormDiv>\n            </LoginFormDivWrap>\n        )\n    }\n}\n\nexport default LoginForm;","import { ILoginInfo } from 'api/model/UserModels';\nimport UserService from 'api/service/UserService';\nimport autobind from 'autobind-decorator';\nimport LoginForm from 'components/LoginForm';\nimport { StringUtlz } from 'lib/Utlz';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { ReactSVG } from 'react-svg';\nimport { toast } from 'react-toastify';\nimport bgimg from 'resources/img/bg_login.png';\nimport Logo from 'resources/img/do.svg';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle  = createGlobalStyle`\n    body {\n        background-color:#fff;\n        user-select: none;\n    }  \n`\nconst Wrap = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background-image: url(${bgimg});\n    background-position: 0 -10%;\n    background-repeat: no-repeat;\n`\nconst HeadLine = styled.div`\n    padding: 40px 20px;\n    svg {\n        width: 40px;\n        background-color: #fff;\n        border-radius: 5px;\n        path {\n            fill:#23282e;\n        }\n    }\n`\n@inject(\"userservice\")\n@observer\nclass DlogLoginPage extends React.Component<RouteComponentProps & {\n    userservice?:UserService\n},{}> {\n\n    @autobind\n    async procLogin(loginInfo:ILoginInfo):Promise<void> {\n        if(StringUtlz.isEmpty(loginInfo.LoginID)) {\n            toast.error(\"ID를 입력하세요\");\n            return;\n        }\n\n        if(StringUtlz.isEmpty(loginInfo.LoginID)) {\n            toast.error(\"ID를 입력하세요\");\n            return;\n        }\n\n        this.props.userservice?.reqLogin(loginInfo, this.props);\n    }\n\n\n    render():JSX.Element {\n        return (\n            <>\n                <GlobalStyle/>\n                <Wrap>\n                    <HeadLine>\n                        <ReactSVG src={Logo} />\n                    </HeadLine>\n                    <LoginForm procLogin={this.procLogin}/>\n                </Wrap>\n            </>\n        )\n    }\n}\n\nexport default withRouter(DlogLoginPage);","import PostService from 'api/service/PostService';\nimport autobind from 'autobind-decorator';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst PostCategoryWrap = styled.div`\n    margin-top: 20px;\n    display:felx;\n    button {\n        border: 1px solid #F3F3F3;\n        margin-right:1rem;\n        :hover {\n            background-color: #456582;\n        }\n    }\n    button.selected {\n        background-color:#f1d02e;\n        border-left\n    }\n`\n@inject('postservice')\n@observer\nclass Category extends React.Component<{\n    postservice?:PostService\n    loadFunc: () => Promise<void>\n}, {}> {\n\n    @autobind\n    onClickCategory(e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void {\n        const nodes = e.currentTarget.parentElement?.children;\n        if(nodes !== undefined) {\n            for(let i=0; i< nodes.length; i++) {\n                nodes[i].classList.remove(\"selected\");\n            }\n            e.currentTarget.classList.add(\"selected\");\n            const category = (e.currentTarget.textContent || '').toLocaleLowerCase();\n            this.props.postservice?.setCategory(category);\n            this.props.loadFunc();\n        }\n    }\n\n    componentDidMount():void {\n        // default\n        this.props.postservice?.setCategory(\"post\");\n    }\n\n    render(): JSX.Element {\n        return (\n            <PostCategoryWrap>\n                <button className=\"selected\" onClick={this.onClickCategory}>Post</button>\n                <button onClick={this.onClickCategory}>Code</button>\n            </PostCategoryWrap>\n        )\n    }\n}\n\nexport default Category;","import { PostModel } from 'api/model/PostModels';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst PostUL = styled.ul`\n    li {\n        margin-bottom: 1rem;\n        border-bottom: 1px solid #3a3649;\n        padding: 1rem 0;\n        :hover h3{\n            text-decoration: underline;\n        }\n    }\n`\n\nconst PostTop = styled.div`\n    font-size: 0.8rem;\n    span:not(:last-child) {\n        margin-right: 1rem\n    }\n    time {\n        letter-spacing: 0.07rem;\n    }\n`\n\nconst PostContents = styled.div`\n    margin-top: 1rem;\n    h3 {\n        margin-bottom: 1.2rem;\n    }\n    p {\n        line-height: 2;\n        font-size: 0.9rem;\n        margin: 0px;\n    }\n`\n\n\ninterface Props {\n    list: PostModel[] | null\n}\n\nclass PostList extends React.Component<Props, {}> {\n    render():JSX.Element {\n        let datas:PostModel[] | null = this.props.list;\n        let renderComp = (<></>);\n        if(datas !== null && datas.length > 0) {\n            renderComp = (\n                <PostUL>\n                    {datas.map(\n                        (data:PostModel, i:any) => (\n                            <li key={i}>\n                                <Link to={`/detail/${data.PostKey}`}>\n                                    <PostTop>\n                                        <span>#Report #Live #Love</span>\n                                        <time>{data.CreatedAt}</time>\n                                    </PostTop>\n                                    <PostContents>\n                                        <h3>{data.PostTitle}</h3>\n                                        <p>{data.PostSubTitle}</p>\n                                    </PostContents>\n                                </Link>\n                            </li>\n                        )\n                    )}\n                </PostUL>\n            )\n        } else if(datas !== null && datas.length === 0) {\n            renderComp =(<div>조회된 내용이 없습니다.</div>)\n        }\n        return  (\n            <>\n                {renderComp}\n            </>\n        )\n    }\n}\n\n\nexport default PostList;","import { PostModel } from 'api/model/PostModels';\nimport PostService from 'api/service/PostService';\nimport autobind from 'autobind-decorator';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst PostUL = styled.ul`\n    li {\n        margin-bottom: 1rem;\n        border-bottom: 1px solid #3a3649;\n        padding: 1rem 0;\n        display: flex;\n        align-items: center;\n        :hover h3{\n            text-decoration: underline;\n        }\n    }\n`\n\nconst PostTop = styled.div`\n    font-size: 0.8rem;\n    span:not(:last-child) {\n        margin-right: 1rem\n    }\n    time {\n        letter-spacing: 0.07rem;\n    }\n`\n\nconst PostContents = styled.div`\n    margin-top: 1rem;\n    h3 {\n        margin-bottom: 1.2rem;\n    }\n    p {\n        line-height: 2;\n        font-size: 0.9rem;\n        margin: 0px;\n    }\n`\n\nconst PostLeftPanel = styled.div`\n    flex:1 ;\n`\n\nconst PostRightPanel = styled.div`\n\n    button {\n        border: 1px solid #F3F3F3;\n        margin-right:1rem;\n        :last-child { margin-right:0;}\n        :hover {\n            background-color: #456582;\n        }\n    }\n    @media screen and (max-width: 700px) {\n        display:flex;\n        flex-direction: column;\n        button {\n            margin-right:0; \n            margin-bottom: 0.3rem;\n            :last-child {margin-bottom:0;}\n        } \n    }\n`\n\ninterface Props {\n    list: PostModel[] | null\n    postservice?:PostService\n    loadFunc: () => Promise<void>\n}\n\n@inject('postservice')\n@observer\nclass PostMngList extends React.Component<RouteComponentProps & Props, {}> {\n\n    async procDelete(postkey: string):Promise<void> {\n        await this.props.postservice?.removePost(postkey);\n        await this.props.loadFunc();\n    }\n\n    @autobind\n    onUpdateClick(postkey: string): void {\n        const {history, postservice} = this.props;\n        postservice?.setPostkey(postkey);\n        history.push(`/post/write`);\n    }\n\n    @autobind\n    onDeleteClick(postkey: string): void {\n        this.procDelete(postkey);\n    }\n\n    render():JSX.Element {\n        let datas:PostModel[] | null = this.props.list;\n        let renderComp = (<></>);\n        if(datas !== null && datas.length > 0) {\n            renderComp = (\n                <PostUL>\n                    {datas.map(\n                        (data:PostModel, i:any) => (\n                            <li key={i}>\n                                <PostLeftPanel>\n                                    <Link to={`/detail/${data.PostKey}`}>\n                                        <PostTop>\n                                            <span>#Report #Live #Love</span>\n                                            <time>{data.CreatedAt}</time>\n                                        </PostTop>\n                                        <PostContents>\n                                            <h3>{data.PostTitle}</h3>\n                                            <p>{data.PostSubTitle}</p>\n                                        </PostContents>\n                                    </Link>\n                                </PostLeftPanel>\n                                <PostRightPanel>\n                                    <button onClick={() => this.onUpdateClick(data.PostKey)}>수정</button>\n                                    <button onClick={() => this.onDeleteClick(data.PostKey)}>삭제</button>\n                                </PostRightPanel>\n                            </li>\n                        )\n                    )}\n                </PostUL>\n            )\n        } else if(datas !== null && datas.length === 0) {\n            renderComp =(<div>조회된 내용이 없습니다.</div>)\n        }\n        return (\n            <>\n                {renderComp}\n            </>\n        )\n    }\n}\nexport default withRouter(PostMngList);","import { PostModel } from 'api/model/PostModels';\nimport autobind from 'autobind-decorator';\nimport Category from 'components/Category';\nimport CommonConatiner from 'components/CommonContainer';\nimport PostList from 'components/PostList';\nimport PostMngList from 'components/PostMngList';\nimport { StringUtlz } from 'lib/Utlz';\nimport { observable } from 'mobx';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport styled from 'styled-components';\nimport UserService from 'api/service/UserService';\nimport PostService from 'api/service/PostService';\n\n\nconst PostContainer = styled.div`\n    padding: 0 1rem;\n`\n\nconst PostWrap = styled.div`\n    margin-top: 2rem;\n   \n`\n\n@inject('postservice', 'userservice')\n@observer\nclass PostListPage extends React.Component<{\n    postservice?:PostService\n    userservice?:UserService\n}, {}> {\n    @observable private list: PostModel[] | null = null;\n\n    @autobind\n    async loadData(): Promise<void> {\n        const category = this.props.postservice?.category;\n        if(StringUtlz.isEmpty(category)) return;\n        const posts = await this.props.postservice!.getPostList(category || '');\n        this.list = posts;\n    }\n\n    componentDidMount(): void {\n        this.loadData();\n    }\n\n    render(): JSX.Element {\n        const isLogin = this.props.userservice?.isLogin;\n        return (\n            <CommonConatiner title=\"Post\">\n                <PostContainer>\n                    <Category loadFunc={this.loadData}/>\n                    <PostWrap>\n                        {!isLogin && <PostList list={this.list}/>}\n                        {isLogin && <PostMngList list={this.list} loadFunc={this.loadData}/>}\n                    </PostWrap>\n                </PostContainer>\n            </CommonConatiner>\n        )\n    }\n    \n}\n\nexport default PostListPage;","import Viewer from '@toast-ui/editor/dist/toastui-editor-viewer';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport { PostModel } from 'api/model/PostModels';\nimport React from 'react';\nimport { ReactSVG } from 'react-svg';\nimport Logo from 'resources/img/do.svg';\nimport styled from 'styled-components';\n\nconst ViewerWrap = styled.div`\n    .tui-scrollsync , .tui-toolbar-divider{\n        display:none!important;\n    }\n    .tui-editor-contents * {\n        color: #F3F3F3;\n    }\n\n    .tui-editor-contents {\n        blockquote {\n            background-color: transparent; \n        }\n\n        h1,h2,h3{\n            border:none;\n        }\n\n        pre {\n            overflow-y:scroll;\n            background-color:#294854;\n        }\n    }\n    \n`\n\nconst PostWrap = styled.div`\n    margin-top: 4rem;\n    display:flex;\n    justify-content:space-between;\n`\n\nconst PostLeftWrap = styled.div`\n    max-width: 750px;\n    flex: 1 1 0%;\n    padding: 0 1rem;\n`\n\nconst FooterWrap = styled.div`\n    display:felx;\n    padding: 0 1rem;\n    margin-top: 25rem;\n    padding-top: 6rem;\n    padding-bottom: 3rem;\n    border-top: 1px solid #3a3649;\n    svg {\n        width:30px;\n        background-color: #282d35   ;\n        border-radius: 5px;\n        margin-right:1rem;  \n        path {\n            fill: white;\n        }    \n    }\n`\n\nconst CopyrightWrap = styled.div`\n   font-size: 0.8rem;\n`\n\nconst CopyrightDomain = styled.div`\n    margin-bottom: 0.5rem;\n`\n\n\nclass PostView extends React.Component<{info:PostModel}, {}> {\n    private viewerEl = React.createRef<HTMLDivElement>();\n\n    initialize():void {\n        const post:PostModel = this.props.info;\n        const target = this.viewerEl.current!;\n        new Viewer({\n            el: target,\n            initialValue: post.PostContent \n        })\n    }\n\n    srchTableOfContents(): void {\n        \n    }\n\n    componentDidMount():void {\n        this.initialize();\n    }\n\n    render():JSX.Element {\n        return (\n            <>\n            <PostWrap>\n                <PostLeftWrap>\n                    <ViewerWrap ref={this.viewerEl}></ViewerWrap>\n                </PostLeftWrap>\n            </PostWrap>\n            <FooterWrap>\n                <ReactSVG src={Logo}/>\n                <CopyrightWrap>\n                    <CopyrightDomain>dosready.github.io</CopyrightDomain>\n                    <div>© 2020 DOS</div>\n                </CopyrightWrap>\n            </FooterWrap>\n            </>\n        )\n    }\n}\n\nexport default PostView;","import { PostModel } from 'api/model/PostModels';\nimport PostService from 'api/service/PostService';\nimport CommonConatiner from 'components/CommonContainer';\nimport PostView from 'components/PostView';\nimport { StringUtlz } from 'lib/Utlz';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { observer, inject } from 'mobx-react';\n\n@inject(\"postservice\")\n@observer\nclass PostViewPage extends React.Component<RouteComponentProps<{postkey:string}> & {\n    postservice?:PostService\n}, {post:PostModel}> {\n\n    readonly state = {\n        post: {} as PostModel\n    }\n\n    async initialize():Promise<void> {\n        const postkey:string = this.props.match.params.postkey;\n        if(!StringUtlz.isEmpty(postkey)) {\n            const data = await this.props.postservice!.getPost(postkey)\n            this.setState({\n                post: data\n            })\n        }\n    }\n\n    componentDidMount():void {\n        this.initialize()\n    }\n\n    render():JSX.Element {\n        const info:PostModel = this.state.post;\n        let PostViewJSX = (<></>)\n        if(!StringUtlz.isEmpty(info.PostKey)) {\n            PostViewJSX = ( <PostView info={info}/>)\n        }\n\n        return (\n            <CommonConatiner title={this.state.post.PostTitle} subTitle={this.state.post.PostSubTitle}>\n                {PostViewJSX}\n            </CommonConatiner>\n        )\n    }\n}\n\nexport default withRouter(PostViewPage);","import UserService from 'api/service/UserService';\nimport { inject, observer } from 'mobx-react';\nimport PostWritePage from 'pages/admin/PostWritePage';\nimport DlogLoginPage from 'pages/public/DlogLoginPage';\nimport PostListPage from 'pages/public/PostListPage';\nimport PostViewPage from 'pages/public/PostViewPage';\nimport React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\ninterface PageInfo {\n    component: any,\n    isPublic: boolean\n}\n\ninterface State {\n    pages : Map<string, PageInfo>\n}\n\n@inject(\"userservice\")\n@observer\nclass LoadPage extends React.Component< RouteComponentProps & {\n    path: string,\n    userservice?:UserService\n}, State> {\n\n   constructor(props: any) {\n       super(props);\n\n       let _map = new Map<string, PageInfo>();\n       _map.set(\"write\",{ component: <PostWritePage/>, isPublic: false});\n       _map.set(\"detail\",{ component: <PostViewPage/>, isPublic: true});\n       _map.set(\"list\",{ component: <PostListPage/>, isPublic: true});\n       _map.set(\"login\",{ component: <DlogLoginPage/>, isPublic: true});\n\n       this.state = {\n           pages: _map\n       };\n   }\n    \n\n    render():JSX.Element {\n        const pages = this.state.pages;\n        const pageInfo = pages.get(this.props.path);\n        const isLogin = this.props.userservice?.isLogin;\n        let renderComp = pageInfo!.component;\n        if(!pageInfo!.isPublic && !isLogin) {\n            renderComp = <DlogLoginPage/>;\n        }   \n        \n        return (\n            <>{renderComp}</>\n        )   \n    }\n}\n\nexport default withRouter(LoadPage);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ReactSVG } from 'react-svg';\nimport Logo from 'resources/img/do.svg';\nimport styled from 'styled-components';\nimport { StringUtlz } from 'lib/Utlz';\n\nexport const HeaderComp = styled.header`\n    position: fixed;\n    z-index: 99;\n    top: 0;\n    left: 0;\n    right: 0;\n    padding: 10px;\n    border-bottom: 1px solid #3a3649;\n    backdrop-filter: blur(16px);\n`;\n\nexport const HeaderContainer = styled.div`\n    display:flex;\n    justify-content: space-between;\n    max-width: 1024px;\n    margin: 0 auto;\n`;\n\nexport const LinkWrap = styled.div`\n    display: flex;\n    align-items: center;   \n    a {\n        font-size: 13.5px;\n        margin-right: 8px;\n        div {\n            svg {\n                width:30px;\n                background-color: #282d35   ;\n                border-radius: 5px;\n                path {\n                    fill: white;\n                }    \n            }\n        }\n    }\n`\n\n\nexport const MainConatiner = styled.main`\n    position:relative;\n    flex:1;\n`\n\nexport const PageConatiner = styled.div`\n    margin-top:8rem;\n    max-width:1024px;\n    margin-left: auto;\n    margin-right: auto;\n`\n\nexport const  PageHeader = styled.header`\n    padding: 0 1rem;\n    p {\n        margin-top: 1rem;\n        border-left: 4px solid #dddddd;\n        padding: 0 15px;\n    }\n`\n\nclass CommonContainerTypeA extends React.Component<{title?:string, subTitle?:string}, {}> {\n    render():JSX.Element {\n        return (\n            <>\n                <HeaderComp>\n                    <HeaderContainer>\n                        <LinkWrap>\n                            <Link to=\"/\"><ReactSVG src={Logo}/></Link>\n                            <Link to=\"/\">오늘도.log</Link>\n                        </LinkWrap>\n                        <LinkWrap>\n                            <Link to=\"/\">Post</Link>\n                            <Link to=\"/\">Code</Link>\n                            <Link to=\"/\">Recipe</Link>\n                        </LinkWrap>\n                    </HeaderContainer>\n                </HeaderComp>\n                <MainConatiner>\n                    <PageConatiner>\n                        <PageHeader>\n                            <h1>{this.props.title}</h1>\n                            {!StringUtlz.isEmpty(this.props.subTitle) ? (<p>{this.props.subTitle}</p>) : \"\"}\n                        </PageHeader>\n                        {this.props.children}\n                    </PageConatiner>\n                </MainConatiner>\n            </>\n        )\n    }\n}\n\nexport default CommonContainerTypeA;","import CommonContainerTypeA from 'components/CommonContainerTypeA';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst AllWeb = styled.div`\n    margin-top: 3rem;\n`\nconst TagLine = styled.div`\n    display: flex;\n    -webkit-box-pack: center;\n    justify-content: center\n`\n\n/*active 추가*/\nconst TagList = styled.div`\n    display: flex;\n    position: relative;\n`\nconst TagTitle01 = styled.a`\n    width: 8rem;\n    height: 3rem;\n    font-size: 1.125rem;\n    color: #fff;\n    display: flex;\n    -webkit-box-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    justify-content: center;\n    text-decoration: none;\n    cursor: pointer;\n    &.active{\n        font-weight: bold;\n        color: #f1d02e;\n        \n    }\n`\nconst TagTitle02 = styled.a`\n    width: 8rem;\n    height: 3rem;\n    font-size: 1.125rem;\n    color: #fff;\n    display: flex;\n    -webkit-box-align: center;\n    align-items: center;\n    -webkit-box-pack: center;\n    justify-content: center;\n    text-decoration: none;\n    cursor: pointer;\n`\n/*태그이름밑라인*/\nconst TagBottomLine = styled.div`\n    height: 2px;\n    display: block;\n    position: absolute;\n    bottom: 0px;\n    background: #f1d02e;\n    transform: translateX(0rem);\n    width: 50%;\n`\n\n/*태그 박스*/\nconst TagBox = styled.section`\n    display: flex;\n    flex-wrap: wrap;\n    margin: 4rem auto 0px;\n`\n\nconst TagBundle = styled.div`\n    margin-bottom: 2rem;\n    display: flex;\n    flex-direction: column;\n    -webkit-box-pack: justify;\n    justify-content: space-between;\n    width: 25%;\n    height: 12rem;\n    padding: 1rem;\n\n   \n`\nconst TagName = styled.a`\n    margin-bottom: 0.875rem;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    height: 2rem;\n    display: inline-flex;\n    align-items: center;\n    margin-right: 0.875rem;\n    color: #f1d02e;\n    font-weight: 500;\n    font-size: 1rem;\n    border-radius: 1rem;\n    transition: all 0.3s ease 0s;\n    border: 1px solid #fff;\n    cursor: pointer;\n    :hover{\n        background-color: #f1d02e;\n        color: #fff;\n        transform: translateY(-7px);\n        border: 1.4px solid #f1d02e;\n    }\n\n`\nconst TagContents =styled.p`\n    margin-top: 0.125rem;\n    text-overflow: ellipsis;\n    font-size: 0.875rem;\n    color: #fff;\n    line-height: 1.5;\n    overflow: hidden;\n    cursor: pointer;\n`\n\nconst TagCount = styled.div`\n    font-size: 0.875rem;\n    color: rgb(173, 181, 189);\n`\n\nclass TagPage extends React.Component<{},{}> {\n\n    render(): JSX.Element {\n        return (\n            <CommonContainerTypeA>\n                <div>\n                    <AllWeb>\n                        <TagLine>\n                            <TagList>\n                                <TagTitle01 className=\"active\">인기순</TagTitle01>\n                                <TagTitle02>조회순</TagTitle02>\n                                <TagBottomLine></TagBottomLine>\n                            </TagList>\n                        </TagLine>\n                        <TagBox>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                            <TagBundle>\n                                <div>\n                                    <TagName>HTML</TagName>\n                                    <TagContents>HTML (Hypertext Markup Language,하이퍼텍스트 마크업 언어)는 프로그래밍 언어는 아니고..</TagContents>\n                                </div>\n                                <TagCount>총 7777 개의 포스트</TagCount>\n                            </TagBundle>\n                        </TagBox>\n                    </AllWeb>\n                </div>\n            </CommonContainerTypeA>\n        )\n    }\n    \n}\n\nexport default TagPage;\n","import '@fortawesome/fontawesome-free/css/all.css';\nimport LoadPage from 'components/LoadPage';\nimport TagPage from 'pages/public/TagPage';\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { createGlobalStyle } from 'styled-components';\nconst GlobalStyle  = createGlobalStyle`\n\n* {\n  box-sizing: border-box;\n}\n\n\n#root {\n  display:flex;\n  flex-direction:column;  \n  min-height: 100vh;\n}\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n   margin: 0;\n   padding: 0;\n   border: 0;\n   vertical-align: baseline;\n}\n\na{\n    text-decoration: none;\n    color: inherit;\n    font-size:inherit;\n    font-weight:inherit;\n    text-decoration: none; \n    &:link, &:visited, &:active{ color: inherit; }\n}\n\ninput, textarea {\n  color: inherit;\n  font-size:inherit;\n  font-weight:inherit;\n  font-family:inherit;\n  border-style:none;\n  outline: none;\n}\n\ntextarea {\n  resize: none;\n}\n\nbutton{\n    border: none;\n    background-color: transparent;\n    text-decoration: none;\n    border-color: transparent;\n    outline: none;\n    cursor: pointer;\n    background-color: transparent;\n    color:inherit;\n    padding:5px 20px;\n    border-radius: 4px;\n    font-size: 0.9rem;\n    :hover {\n      box-shadow: 1px 1px 2px 0px #0c1217;\n    }\n}\n\nbody {\n   line-height: 1;\n   margin: 0;\n   font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; \n   background-color: #282d35;\n   color:#F3F3F3;\n}\n\nol, ul {\n   list-style: none;\n}\n\n.tui-editor-contents {\n  font-size:16px;\n  margin-bottom: 100px;\n  h1, h2 {\n      padding-top: 10px;\n      border-bottom: none;\n  }\n  h1 {\n    font-size: 35px;\n  }\n  h2 {\n    font-size: 32px;\n  }\n  h3 {\n    font-size: 30px;\n  }\n  h4 {\n    font-size: 27px;\n  }\n  h5 {\n    font-size: 24px;\n  }\n  h6 {\n    font-size: 21px;\n  }\n\n  blockquote {\n    border-left : 4px solid #2A3D4E;\n    border-left: 4px solid #2A3D4E;\n    background-color: #E7F3FF;\n    padding: 8px 15px;\n  }\n`\n\nclass App extends React.Component<{}, {}> {\n  render():JSX.Element {\n    return (\n      <>\n        <GlobalStyle/>\n          <Router basename=\"/dlog\">\n            <Switch>\n              <Route exact path=\"/common/login\" component={() => <LoadPage path=\"login\"/>}  />\n              <Route exact path=\"/post\" component={() => <LoadPage path=\"list\"/>}  />\n              <Route exact path=\"/post/write\" component={() => <LoadPage path=\"write\"/>} />\n              <Route exact path=\"/post/:postkey\" component={() => <LoadPage path=\"write\"/>} />\n              <Route exact path=\"/detail/:postkey\" component={() => <LoadPage path=\"detail\"/>} />\n              <Route exact path=\"/tmpl/tag\" component={TagPage}  />\n              <Route exact path=\"/\" component={() => <LoadPage path=\"list\"/>}  />\n            </Switch>\n          </Router>\n        <ToastContainer\n          position=\"top-right\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n          />\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport {store} from 'api/Core';\n\nReactDOM.render(\n    <Provider {...store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}