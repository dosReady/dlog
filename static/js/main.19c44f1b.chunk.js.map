{"version":3,"sources":["lib/AxiosUtlz.tsx","lib/index.tsx","org/dlog/comn/LoginRepo.tsx","org/dlog/comn/LoginSrvc.tsx","org/dlog/error/ErrorComp.tsx","App.tsx","serviceWorker.ts","modules/stores/AppStore.tsx","index.tsx","modules/stores/index.tsx"],"names":["AuthChek","serverURL","process","SERVER_MODE","config","baseURL","headers","responseType","sec","axios","create","admin","reqSuccessCallback","a","console","log","reqErrorCallback","error","Promise","reject","resSuccessCallback","res","data","errormsg","ACCESS","user","LoginSrvc","getLocalStorage","post","undefined","chkRes","setLocalStorage","Authorization","AccessToken","window","location","replace","REFRESH","resErrorCallback","interceptors","request","use","response","param","LoginRepo","login","this","logout","removeLocalStorage","localStorage","setItem","JSON","stringify","defaults","storage","getItem","parse","appstore","removeItem","ErrorBoundaryComp","state","hasError","errorInfo","props","children","React","Component","GlobalStyle","createGlobalStyle","LoginPage","loadable","BlogListPage","BlogSrchPage","BlogWritePage","BlogDetailPage","App","inject","observer","appStore","setUser","basename","exact","path","component","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Boolean","hostname","match","AppStore","root","_user","LoginID","Password","Role","loginID","password","_srchText","paramStr","persist","observable","action","computed","stores","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19c44f1b.chunk.js","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError } from \"axios\";\nimport LoginSrvc from \"org/dlog/comn/LoginSrvc\";\nimport { User } from \"@types\";\nimport 'dotenv/config';\n\n\nconst serverURL: string = process.env.SERVER_MODE ? \"https://dveloper.me\" : \"http://127.0.0.1:8080\";\nenum AuthChek {\n    ACCESS = \"access\",\n    REFRESH = \"refresh\"\n}\n\nconst config:AxiosRequestConfig = {\n    baseURL: serverURL,\n    headers: {\n        \"content-type\": \"application/json\"\n    },\n    responseType: \"json\"\n}\n\nexport const sec:AxiosInstance = axios.create(config);\nexport const admin:AxiosInstance = axios.create(config);\n\nconst reqSuccessCallback = async function(config:AxiosRequestConfig):Promise<AxiosRequestConfig> {\n    console.log(\"reqSuccessCallback\");\n    return config;\n}\nconst reqErrorCallback = async function(error:AxiosError):Promise<any> {\n    console.log(\"reqErrorCallback\");\n    return Promise.reject(error);\n}\n\nconst resSuccessCallback = async function(res:AxiosResponse):Promise<AxiosResponse> {\n    console.log(\"resSuccessCallback\");\n    const data:{errormsg:string} = res.data;\n\n    if(data.errormsg === AuthChek.ACCESS) {\n        const user = LoginSrvc.getLocalStorage();\n        const chkRes:AxiosResponse<{user:User}> = await admin.post('vaild/refresh', {\"user\": user});\n      \n        if(chkRes.data.user !== undefined) {\n            LoginSrvc.setLocalStorage(chkRes.data.user);\n            res.config.headers.Authorization = `Bearer ${chkRes.data.user.AccessToken}`;\n            return sec(res.config);\n        } else {\n            window.location.replace(\"/login\");\n            return res;\n        }\n        \n    } else if(data.errormsg === AuthChek.REFRESH) {\n        window.location.replace(\"/login\");\n        return res;\n    } else {\n        return res;\n    }\n}\nconst resErrorCallback = async function(error:AxiosError):Promise<any> {\n    console.log(\"resErrorCallback\")\n    // console.log(error.response?.config)\n    // const httpcode: number = error.response!.status;\n    // if(httpcode === HttpStatusCode.UNAUTHORIZED) {\n\n   \n           \n    //     }\n      \n    // }\n\n    return Promise.reject(error);\n}\nsec.interceptors.request.use(reqSuccessCallback, reqErrorCallback);\n\nsec.interceptors.response.use(resSuccessCallback, resErrorCallback);\n\n","import {sec}from 'lib/AxiosUtlz';\n\nexport {sec};","import { User } from \"@types\";\nimport { AxiosResponse } from \"axios\";\nimport { sec } from \"lib\";\n\ninterface ApiReponse {\n    user:User\n}\n\nclass LoginRepo{\n    public async login(param:User):Promise<User> {\n        const { data }: AxiosResponse<ApiReponse> = await sec.post(\"proc/login\", { \"user\": param })\n        return data.user;\n    }\n\n    public async logout(param:User):Promise<void> {\n        await sec.post(\"proc/logout\", { \"user\": param })\n    }\n}\n\nexport default new LoginRepo();\n","import { User } from \"@types\";\nimport { sec } from \"lib\";\nimport LoginRepo from \"./LoginRepo\";\n\nconst STORENAME = 'appstore'\n\nclass LoginSrvc {\n    \n    public async login(param:User): Promise<void> {\n        const user = await LoginRepo.login(param);\n        this.setLocalStorage(user);\n        window.location.replace(\"/blog\");\n    }\n\n    public async logout(param:User): Promise<void> {\n        await LoginRepo.logout(param);\n        this.removeLocalStorage();\n        window.location.replace(\"/login\");\n    }\n\n    public setLocalStorage(param:User):void {\n        if(param !== null && param !== undefined) {\n            window.localStorage.setItem(STORENAME, JSON.stringify(param))\n            sec.defaults.headers.Authorization = `Bearer ${param.AccessToken}`;\n        }\n    }\n\n    public getLocalStorage():User| null {\n        const storage:string | null= window.localStorage.getItem(STORENAME);\n        if(storage != null && storage !== \"undefined\") return JSON.parse(storage);\n        else return null;\n    }\n\n    public isEmpty(): boolean {\n        const appstore = window.localStorage.getItem(STORENAME);\n        if(appstore != null && appstore !== \"undefined\") return false;\n        return true;\n    }\n\n    public removeLocalStorage():void {\n        sec.defaults.headers.Authorization = \"\";\n        window.localStorage.removeItem(STORENAME);\n    }\n}\n\n export default  new LoginSrvc();","import React, { ErrorInfo } from 'react';\n\n\ninterface State {\n    hasError : boolean\n}\n\nclass ErrorBoundaryComp extends React.Component<{}, State> {\n    state = {\n        hasError: false,\n    }\n\n\n    static getDerivedStateFromError(error:Error):State {\n        console.log(error);\n        return { hasError: true }\n    }\n\n    componentDidCatch(error: Error, errorInfo: ErrorInfo):void {\n        console.log(\"바운더리 에러\")\n    }\n\n    render():JSX.Element {\n        if(this.state.hasError) {\n            return <div>\"error as Error.toString()\"</div>\n        } else {\n            return <>{this.props.children}</>;\n        }\n           \n        \n    }\n}\n\nexport default ErrorBoundaryComp;","import '@fortawesome/fontawesome-free/css/all.css';\nimport loadable from '@loadable/component';\nimport { AppStore } from '@types';\nimport { inject, observer } from 'mobx-react';\nimport LoginSrvc from 'org/dlog/comn/LoginSrvc';\nimport ErrorBoundaryComp from 'org/dlog/error/ErrorComp';\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { createGlobalStyle } from 'styled-components';\n\n\nconst GlobalStyle  = createGlobalStyle`\n\n* {\n  box-sizing: border-box;\n}\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n   margin: 0;\n   padding: 0;\n   border: 0;\n   vertical-align: baseline;\n}\n\na{\n    text-decoration: none;\n    color: inherit;\n    font-size:inherit;\n    font-weight:inherit;\n    text-decoration: none; \n    &:link, &:visited, &:active{ color: inherit; }\n}\n\ninput, textarea {\n  color: inherit;\n  font-size:inherit;\n  font-weight:inherit;\n  border-style:none;\n  outline: none;\n}\n\ntextarea {\n  resize: none;\n}\n\nbutton{\n    border: none;\n    background-color: transparent;\n    text-decoration: none;\n    border-color: transparent;\n    outline: none;\n    cursor: pointer;\n    background-color: transparent;\n    color:white;\n    padding:5px 20px;\n    border-radius: 4px;\n    font-size: 0.9rem;\n    :hover {\n      box-shadow: 1px 1px 2px 0px #0c1217;\n    }\n}\n\nbody {\n   line-height: 1;\n   margin: 0;\n   font-family: 'NanumGothic';\n   user-select: none;\n   background-color: #FFFFFF;\n}\nol, ul {\n   list-style: none;\n}\n\n.tui-editor-contents {\n  font-size:16px;\n  margin-bottom: 100px;\n  h1, h2 {\n      padding-top: 10px;\n      border-bottom: none;\n  }\n  h1 {\n    font-size: 35px;\n  }\n  h2 {\n    font-size: 32px;\n  }\n  h3 {\n    font-size: 30px;\n  }\n  h4 {\n    font-size: 27px;\n  }\n  h5 {\n    font-size: 24px;\n  }\n  h6 {\n    font-size: 21px;\n  }\n\n  blockquote {\n    border-left : 4px solid #2A3D4E;\n    border-left: 4px solid #2A3D4E;\n    background-color: #E7F3FF;\n    padding: 8px 15px;\n  }\n\n`\n\nconst LoginPage = loadable(\n  () => import('org/dlog/view/LoginView'),\n)\n\nconst BlogListPage = loadable(\n  () => import('org/dlog/view/BlogListView'),\n)\n\nconst BlogSrchPage = loadable(\n  () => import('org/dlog/view/BlogSrchView')\n)\n\nconst BlogWritePage = loadable(\n  () => import('org/dlog/view/BlogWriteView')\n)\n\nconst BlogDetailPage = loadable(\n  () => import('org/dlog/view/BlogDetailView'),\n  //{fallback: <BlogDetailFakeView/>}\n)\n\n@inject('appStore') \n@observer\nclass App extends React.Component<{appStore?: AppStore}, {}> {\n\n  componentDidMount():void {\n    const user = LoginSrvc.getLocalStorage();\n    if(user !== null) {\n      this.props.appStore?.setUser(user);\n    }\n  }\n\n  render():JSX.Element {\n    return (\n      <>\n        <GlobalStyle/>\n        <ErrorBoundaryComp>\n          <Router basename={`${process.env.PUBLIC_URL}/`}>\n            <Switch>\n              <Route exact path=\"/\" component={BlogListPage} />\n              <Route exact path=\"/blog\" component={BlogListPage} />\n              <Route exact path=\"/blog/write\" component={BlogWritePage} />\n              <Route exact path=\"/blog/write/:postid\" component={BlogWritePage} />\n              <Route exact path=\"/blog/srch\" component={BlogSrchPage}/>\n              <Route exact path=\"/blog/:postid\" component={BlogDetailPage}/>\n              <Route exact path=\"/login\" component={LoginPage} />\n            </Switch>\n          </Router>\n        </ErrorBoundaryComp>\n\n        <ToastContainer\n          position=\"bottom-right\"\n          autoClose={5000}\n          hideProgressBar={false}\n          newestOnTop\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n          />\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {observable, action, computed} from 'mobx';\nimport RootStore from 'modules/stores';\nimport {persist} from 'mobx-persist';\nimport { User } from '@types';\n\nclass AppStore {\n    public root:RootStore;\n\n    @persist @observable \n    private _user:User;\n\n    @observable \n    private _srchText: string = \"\";\n\n    constructor(root:RootStore) {\n        this.root = root;\n        this._user = {LoginID: '', Password: '', Role: ''};\n    }\n\n    @action\n    public setLoginID(loginID:string) {\n        this._user.LoginID = loginID;\n    }\n\n    @computed\n    public get getLoginID(): string {\n        return this._user.LoginID;\n    }\n\n    @action\n    public setPwd(password:string) {\n        this._user.Password = password;\n    }\n\n    @action\n    public getPwd(): string {\n        return this._user.Password;\n    }\n\n    @action\n    public setUser(param: User):void {\n        this._user = param;\n        this._user.Password = \"\";\n    }\n    \n    @action\n    public getUser():User {\n        return this._user;\n    }\n\n    @action \n    public getSrchText():string {\n        return this._srchText;\n    }\n\n    @action \n    public setSrchText(paramStr: string):void {\n        this._srchText = paramStr;\n    }\n}\n\nexport default AppStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'mobx-react';\nimport RootStore from 'modules/stores';\n\n\nconst stores = new RootStore();\nReactDOM.render(\n    <Provider {...stores}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import AppStore from 'modules/stores/AppStore';\n\n\nclass RootStore {\n    public appStore:AppStore;\n\n    constructor() {\n        this.appStore = new AppStore(this);\n    }\n}\n\nexport default RootStore;"],"sourceRoot":""}